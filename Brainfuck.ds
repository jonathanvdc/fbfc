using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Flame;
using Flame.Build;
using Flame.Compiler;
using Flame.Compiler.Build;
using Flame.Compiler.Expressions;
using Flame.Compiler.Statements;
using Flame.Compiler.Variables;

namespace Flame.Brainfuck
{
    public class SourceReader
    {
        public const this(set ISourceDocument Document)
        {
            this.Code = Document.Source;
            this.Position = 0;
        }

        public string Code { const get; private set; }
        public ISourceDocument Document { const get; private set; }
        public int Position;

        public bool IsEmpty { const get return Position >= Code.Length; }
        public char Previous { const get if (Position > 0 && Position <= Code.Length) return Code[Position - 1]; else return default(char);}
    }

    public class BrainfuckEnvironment
    {
        public const this(set IVariable ArrayVariable, set IVariable PointerVariable);

        public IVariable ArrayVariable { const get; private set; }
        public IVariable PointerVariable { const get; private set; }

        public const IVariable CreateDataVariable()
        {
            return new ElementVariable(ArrayVariable.CreateGetExpression(), new IExpression[] { PointerVariable.CreateGetExpression() });
        }
    }

    public class Compiler
    {
        public const this(set ICompilerLog Log, set IMethod ReadMethod, set IMethod WriteMethod);
        public const this(set ICompilerLog Log, IBinder Binder)
        {
            var consoleType = Binder.BindType("System.Console");
            if (consoleType == null)
            {
                Log.LogWarning(new LogEntry("Console not found", "System.Console was not found for environment '" + Binder.Environment.Name + "'. IO calls will be replaced with constants."))
            }
            else
            {
                var methods = consoleType.GetAllMethods();
                WriteMethod = methods.GetMethod("Write", true, PrimitiveTypes.Void, new IType[] { PrimitiveTypes.Char });
                ReadMethod = methods.GetMethod("Read", true, PrimitiveTypes.Char, new IType[] { });
                if (ReadMethod == null)
                {
                    ReadMethod = methods.GetMethod("Read", true, PrimitiveTypes.Int32, new IType[] { });
                }
                if (WriteMethod != null)
                {
                    Log.LogEvent(new LogEntry("Output method found", "'void " + WriteMethod.FullName + "(" + WriteMethod.GetParameters()[0].ParameterType.Name + ")' has been found."));
                }
                else
                {
                    Log.LogWarning(new LogEntry("Output method not found", "'void System.Console.Write(char)' was not been found for environment '" + Binder.Environment.Name + "'. No output will be written."));
                }
                if (ReadMethod != null)
                {
                    Log.LogEvent(new LogEntry("Input method found", "'" + ReadMethod.ReturnType.Name + " " + ReadMethod.FullName + "()' has been found."));
                }
                else
                {
                    Log.LogWarning(new LogEntry("Input method not found", "'char System.Console.Read()' was not been found for environment '" + Binder.Environment.Name + "'. No output will be read."));
                }
            }
        }

        public ICompilerLog Log { const get; private set; }

        public IMethod WriteMethod { const get; private set; }
        public IMethod ReadMethod { const get; private set; }

        public const IStatement CreateWriteStatement(IExpression Value)
        {
            if (WriteMethod == null)
                return new EmptyStatement();

            return new ExpressionStatement(new InvocationExpression(WriteMethod, null,
                new IExpression[] {
                    new ConversionExpression(Value, WriteMethod.GetParameters()[0].ParameterType)
                }));
        }

        private IExpression readExpr;
        public const IExpression CreateReadExpression(IType TargetType)
        {
            if (readExpr == null)
            {
                if (ReadMethod == null)
                    readExpr = new ConversionExpression(new Int8Expression(0), TargetType);

                var call = new InvocationExpression(ReadMethod, null, new IExpression[] { });

                if (ReadMethod.ReturnType.IsSignedInteger)
                {
                    var resultVariable = new LateBoundVariable(ReadMethod.ReturnType);
                    var resultSet = resultVariable.CreateSetStatement(call);
                    var resultExpr = resultVariable.CreateGetExpression();
                    var zero = new ConversionExpression(new Int8Expression(0), ReadMethod.ReturnType);
                    var selectExpr = new SelectExpression(new GreaterThanExpression(resultExpr, zero), resultExpr, zero);
                    return new InitializedExpression(resultSet, selectExpr, resultVariable.CreateReleaseStatement());
                }
                else
                    readExpr = new ConversionExpression(call, TargetType);
            }
            return readExpr;
        }

        public const IAssembly Compile(string Name, ISourceDocument Code)
        {
            return ToAssembly(Name, CompileBody(new SourceReader(Code)));
        }

        public const IAssembly ToAssembly(string Name, IStatement Statement)
        {
            var descAssembly = new DescribedAssembly(Name);
            var descType = new DescribedType("Program", descAssembly);
            var descMethod = new DescribedBodyMethod("Main", descType, PrimitiveTypes.Void, true);
            descMethod.Body = Statement;
            descType.AddMethod(descMethod);
            descAssembly.AddType(descType);
            descAssembly.EntryPoint = descMethod;
            return descAssembly;
        }

        public IStatement CompileBody(SourceReader Reader)
        {
            int cellCount = Log.Options.GetOption<int>("cell-count", 30000); // Arbitrary array size

            var elemType = PrimitiveTypes.UInt8;
            var arrType = elemType.MakeArrayType(1); // uint8[]
            var arrVar = new LateBoundVariable("data", arrType);
            var arrCreation = arrVar.CreateSetStatement(new NewArrayExpression(elemType, new IExpression[] { new Int32Expression(cellCount) }));

            var ptrVar = new LateBoundVariable("ptr", PrimitiveTypes.Int32);
            var ptrInit = ptrVar.CreateSetStatement(new Int32Expression(0));

            var env = new BrainfuckEnvironment(arrVar, ptrVar);

            var body = CompileBody(Reader, env);

            if (!Reader.IsEmpty)
            {
                Log.LogWarning(new LogEntry("Program closed", "The program was closed by ']'. This is a compiler extension.", new SourceLocation(Reader.Document, Reader.Position, 1)));
            }

            var ret = new ReturnStatement();

            return new BlockStatement(new IStatement[] { arrCreation, ptrInit, body, ret });
        }

        private IStatement CompileBody(SourceReader Reader, BrainfuckEnvironment Environment)
        {
            var stmts = new List<IStatement>();

            while (!Reader.IsEmpty)
            {
                char item = Reader.Code[Reader.Position];
                if (item == ']')
                {
                    break; // This signifies the end of a while loop. Assume we're parsing said while loop's body.
                }

                if (item == '>')
                {
                    stmts.Add(Environment.PointerVariable.CreateSetStatement(new AddExpression(Environment.PointerVariable.CreateGetExpression(), new Int32Expression(1))));
                }
                else if (item == '<')
                {
                    stmts.Add(Environment.PointerVariable.CreateSetStatement(new SubtractExpression(Environment.PointerVariable.CreateGetExpression(), new Int32Expression(1))));
                }
                else if (item == '+')
                {
                    var elem = Environment.CreateDataVariable();
                    stmts.Add(elem.CreateSetStatement(new AddExpression(elem.CreateGetExpression(), new Int32Expression(1))));
                }
                else if (item == '-')
                {
                    var elem = Environment.CreateDataVariable();
                    stmts.Add(elem.CreateSetStatement(new SubtractExpression(elem.CreateGetExpression(), new Int32Expression(1))));
                }
                else if (item == '[')
                {
                    int pos = Reader.Position;
                    Reader.Position++;
                    var elem = Environment.CreateDataVariable();
                    var cond = new InequalityExpression(elem.CreateGetExpression(), new Int32Expression(0));
                    var body = CompileBody(Reader, Environment);
                    if (Reader.IsEmpty)
                    {
                        Log.LogError(new LogEntry("Loop not closed", "A loop was opened with '[', but not closed with ']'. Consider closing it.", new SourceLocation(Reader.Document, pos, 1)));
                    }
                    stmts.Add(new WhileStatement(cond, body));
                }
                else if (item == '.')
                {
                    var elem = Environment.CreateDataVariable();
                    stmts.Add(CreateWriteStatement(elem.CreateGetExpression()));
                }
                else if (item == ',')
                {
                    var elem = Environment.CreateDataVariable();
                    stmts.Add(elem.CreateSetStatement(CreateReadExpression(elem.Type)));
                }
                Reader.Position++;
            }

            return new BlockStatement(stmts);
        }
    }
}
